#!/usr/bin/env bash

#
# bytes
# Sum the number of bytes in a directory listing
# Written by HP Dietz | h.p.dietz@gmail.com
#

readonly VERSION=1.4.0
readonly NUMBER_REGEX="^[0-9]+$"
readonly ARGS="$@"
#TOTAL_BYTES=0
#UNIT=bytes
#DIR=.
#LS_OPTS=l
#PRINT_NEWLINE=true
#PRECISION=3
#UNIT_FACTOR=1

usage() {
  echo "Usage: bytes [-u | --unit <b | kb | mb | gb | tb>] [-a | --all] [-n | --newline] [-p | --precision <precision>] [-v | --version] [directory]" >&2
}

version() {
  echo "bytes v$VERSION" >&2
}

function setUnit {
  case "$1" in
    b) UNIT=bytes;;
    kb) UNIT=kbytes;;
    mb) UNIT=mbytes;;
    gb) UNIT=gbytes;;
    tb) UNIT=tbytes;;
    *) echo "Unknown unit: $1" >&2; printUsageAndExit;;
  esac
}

function setDir {
  dir=$1
  if [[ "$dir" == */ ]]; then
    dir=${dir%/}
  fi
  if [ -d "$dir" ]; then
    DIR=$dir
  else
    echo "DIR does not exist: $1"
    printUsageAndExit
  fi
}

function setPrecision {
  if ! [[ $1 =~ $NUMBER_REGEX ]] ; then
    echo "Invalid precision: $1"
    printUsageAndExit
  fi
  PRECISION=$1
}

function printDirSize {
  output=$(echo -e "scale=$PRECISION \n$1/$2 \nquit" | bc)
  if $PRINT_NEWLINE ; then
    echo "$output"
  else
    echo -n "$output"
  fi
}

getUnitFactor() {
  local unit=$1
  local outVar=$2
  case "$unit" in
    b)
      eval $outVar=1
      ;;
    kb)
      eval $outVar=1024
      ;;
    mb)
      let f=1024**2
      eval $outVar=$f
      ;;
    gb)
      let f=1024**3
      eval $outVar=$f
      ;;
    tb)
      let f=1024**4
      eval $outVar=$f
      ;;
    *)
      echo "Invalid unit: $unit" >&2;
      usage
      exit 1
      ;;
  esac
}

getPrecision() {
  local precision=$1
  local outVar=$2

  if ! [[ $precision =~ "$NUMBER_REGEX" ]]; then
    echo "Invalid precision: $precision" >&2
    usage
    exit 1
  fi
  eval $outVar=$precision
}

parseArgs() {
  local arg
  for arg 
  do
    case "$arg" in
      # translate --long-options into short options
      --all)        args="${args}-a " ;;
      --newline)    args="${args}-n " ;;
      --precision)  args="${args}-p " ;;
      --unit)       args="${args}-u " ;;
      --version)    args="${args}-v " ;;
      # pass through anything else
      *)            args="${args} ${arg} " ;;
    esac
  done

  eval set -- $args

  local lsOpts=l
  local newline=true
  local precision=3
  local unitFactor=1

  while getopts "anp:u:v" OPTION;
  do
    case $OPTION in
      a) 
        lsOpts=${lsOpts}a
        ;;
      n)
        printNewline=false
        ;;
      p)
        getPrecision "$OPTARG" precision
        ;;
      u)
        getUnitFactor "$OPTARG" unitFactor
        ;;
      v)
        version
        exit 0
        ;;
      *)
        echo "Invalid option: -$OPTION" >&2
        usage
        exit 1
        ;;
    esac
  done

  readonly LS_OPTS=$lsOpts
  readonly NEWLINE=$newline
  readonly PRECISION=$precision
  readonly UNIT_FACTOR=$unitFactor
}

main() {
  parseArgs $ARGS
  echo "LS_OPTS: ${LS_OPTS}"
  echo "NEWLINE: ${NEWLINE}"
  echo "PRECISTION: ${PRECISION}"
  echo "UNIT_FACTOR: ${UNIT_FACTOR}"
}

main

#while [ "$#" -gt 0 ]; do
#  case "$1" in
#    -u|--unit) setUnit "$2"; shift 2;;
#    -n|--newline) PRINT_NEWLINE=false; shift 1;;
#    -a|--all) LS_OPTS+="a"; shift 1;;
#    -p|--precision) setPrecision "$2"; shift 2;;
#    -v|--version) printVersionAndExit;;
#    -*) echo "Unknown option: $1" >&2; printUsageAndExit;;
#    *) setDir $1; shift 1;;
#  esac
#done
#
#for Bytes in $(ls -${LS_OPTS} ${DIR} | grep "^-" | awk '{ print $5 }')
#do
#    let TOTAL_BYTES=$totalBytes+$Bytes
#done
#
#case "$UNIT" in
#  kbytes) let UNIT_FACTOR=1024;;
#  mbytes) let UNIT_FACTOR=1024**2;;
#  gbytes) let UNIT_FACTOR=1024**3;;
#  tbytes) let UNIT_FACTOR=1024**4;;
#esac
#
#printDirSize $TOTAL_BYTES $UNIT_FACTOR
